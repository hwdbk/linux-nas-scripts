#!/bin/bash
# usage: ln_with_ea [-f] $1 $2
# a special version of ln that checks the links before overwriting them
# $1 must be a regular file
# $2 can be a directory (or "." or ""), a new file (i.e. the link to be created) or an existing file (to be replaced by the link)
# if $2 is empty, ln uses the current directory (".")
# if -f is specified, the link is enforced, even if the target file exists and its link count is 1 (i.e. will be deleted)

fileid() {
	# create a unique fileid that are the same for hard links: "<deviceId>_<inodeNumber>"
	stat -c "%d_%i" "$1"
}

if [[ $1 == -f ]] ; then lcnt=0 ; shift ; else lcnt=1 ; fi
if [[ ! -f $1 ]] ; then echo "$0: no such file: $1" ; exit 1 ; fi
if [[ -z $2 ]] ; then set -- "$1" "." ; fi
if [[ -d $2 ]] ; then set -- "$1" "$2/$(basename "$1")" ; fi
# at this point, both $1 and $2 are file references (which makes the below a lot simpler), of which $1 exists and $2 may exist.
# distinguish three situations (most likely to least likely):
# 1) $1 and $2 are already each other's link - no futher linking necessary on $1 and $2
# OR
# 2) $2 does not exist and the link can be created normally
# OR
# 3) $2 already exists, AND the link count on $2 > 1, AND the file can therefore be safely/forcibly overwritten by a link to $1
# NOTE that using this mechanism replaces the target file $2 (which could be a link), so if this file
# contains any tag xattrs, the tags need to be reassigned manually on $1. so the normal procedure for the user
# is to move $1 (the original of the link to $2) to a __trash, put a new version in place at $1, reassign the tags and _then_ run this script. in this way,
# the link count on the trashed file's hardlinks are always kept > 1 and all links will be cleaned up safely. alternatively, if the file at $1 is deleted
# rather than moved to a __trash before replaced by a new $1, the link count check on the trashed file's link(s) prevents it to be deleted permanently, an error
# message is displayed and the file can be located and recovered first.
if	( \
		[[ -f $2 && $(fileid "$1") == $(fileid "$2") ]] \
	) || \
	( \
		[[ ! -f $2 ]] && ln "$1" "$2" \
	) || \
	( \
		[[ -f $2 ]] && ( (( $(stat -c "%h" "$2") > $lcnt )) || ! echo "not replacing $2 with link to $1 (link count is 1)" ) && echo "replacing $2 with link to $1" && \
		ln -f "$1" "$2" \
	) ; then
	# at this point, $1 and $2 are each other's hard links
	if ! [[ -f $1 && -f $2 && $(fileid "$1") == $(fileid "$2") ]] ; then echo "consistency error between $1 and $2" ; exit 1 ; fi
fi
#EOF
